// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MyToken {
    // Private variables
    uint private ownerCode;
    address private owner;

    // Public variables
    struct Token {
        string name;
        string abbrv;
        uint totalSupply;
    }
    Token public coin;

    // Mapping variables
    mapping(address => uint256) private balances;

    // Constructor
    constructor() {
        ownerCode = 500;
        owner = msg.sender;
        coin.name = "MarielleFE";
        coin.abbrv = "MrllFE";
        coin.totalSupply = 1000; // Set initial total supply
        balances[msg.sender] = coin.totalSupply; // Give all tokens to contract deployer
    }

    // Modifier to check if the caller is the owner
    modifier isOwner() {
        require(msg.sender == owner, "You do not own this token.");
        _;
    }

    // Function to get the owner code
    function getCode() public view isOwner returns (uint) {
        return ownerCode;
    }

    // Function to add value to the owner code
    function addToOwnerCode(uint _value) public isOwner {
        ownerCode += _value;
    }

    // Burn function
    function burn(uint _val) external {
        require(balances[msg.sender] >= _val, "Insufficient balance to burn.");
        balances[msg.sender] -= _val; // Deduct burned tokens from sender's balance
        coin.totalSupply -= _val; // Reduce total supply
        ownerCode -= _val; // Subtract burned tokens from ownerCode
    }
}
